<!DOCTYPE html>
<html>
    <head>
        <title>MAP EDITOR</title>
        <style>
            .upload_btn{
                cursor: pointer;
                text-align:center; 
                border:1px black solid; 
                padding:0.2rem;
            }
            .upload_btn:hover{
                background-color: black;
                color: white;
            }
        </style>
    </head>
    <script>
        const WALL = 0;
        const FLOOR = 1;

        const default_wall_tiles_length = 2;
        const default_floor_tiles_length = 1;

        var nowclickedType = 0; // 0: wall | 1: floor
        var nowclickedIdx = 0;
        var width = 19;
        var height = 19;
        var map = [];
        var sprites = [];
        
        var wall_tiles_innerURL = [];
        var floor_tiles_innerURL = [];

        var wall_tiles = [];
        var floor_tiles = [];
        var sprite_tiles = [];

        function CONVERT_RMP(){
            let ret = {};
            ret['name'] = document.getElementById('mapname').value;
            ret['width'] = width;
            ret['height'] = height;
            ret['map'] = map;
            ret['sprites'] = sprites;
            ret['wall_tiles'] = wall_tiles;
            ret['floor_tiles'] = floor_tiles;
            ret['sprite_tiles'] = sprite_tiles;
            
            let data = JSON.stringify(ret);
            console.log(data);
            
            const xhr = new XMLHttpRequest();
            const method = "POST";
            const url = "/process/convertfile";
            xhr.open(method, url);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onreadystatechange = (event) => {
                console.log(xhr.response); 
            }
            xhr.send(`filename=${ret.name}&data=${data}`);
        }

        function LOADING_RMP(){
            let modal_bg = document.createElement('div');
            let modal = document.createElement('div');
            modal_bg.id = 'modal_bg';
            modal_bg.style.justifyContent = 'center';
            modal_bg.style.alignItems = 'center';
            modal_bg.style.display='flex';
            modal_bg.style.position='absolute';
            modal_bg.style.left = '0px';
            modal_bg.style.top = '0px';
            modal_bg.style.width = '100%';
            modal_bg.style.height = '100%';
            modal_bg.style.background = 'rgba(0, 0, 0, 0.7)';

            modal.id = 'modal';
            modal.style.background = 'white';
            modal.style.color = 'black';
            modal.style.padding = '0rem 2rem 0rem 2rem';
            modal.style.height = 'fit-content';
            modal.style.width = 'fit-content';
            modal.innerHTML = 
            "<h3 style = 'text-align:center;'>JSON LOADER</h3>" +
            "<input type = 'file' id = 'RMP_uploader' style = 'display:none;'>" +
            "<label for = 'RMP_uploader'><p class = 'upload_btn'>upload</p></label>"+
            "<p style = 'text-align:center'><button id = 'btn_admit' style = 'margin-right:0.5rem;' disabled>LOAD</button><button onclick = 'CLOSE_ADDFILE_MODAL()'>CLOSE</button></p>";+
            modal_bg.appendChild(modal); 
            document.body.appendChild(modal_bg);
            let file = document.getElementById('RMP_uploader');
            file.onchange = () => {
                let fileList = file.files;
                let reader = new FileReader();
                reader.onload = (e) => {
                    let text = e.target.result;
                    document.getElementById('btn_admit').disabled = false;
                    document.getElementById('btn_admit').addEventListener('click', ()=>{
                        let ob = JSON.parse(text);
                        let map = ob.map;
                        for(let i = 0; i<ob.tiles.length; i++) tiles_src[2+i] = ob.tiles[i];
                        for(let y = 0; y<3; y++){
                            for(let x = 0; x<3; x++){
                                let idx = y*3 + x;
                                if(idx < 2) continue;
                                let img_cell = document.getElementById(`tile_${idx}`);
                                if(idx < tiles_src.length) img_cell.src = tiles_src[idx];
                            }
                        }
                        for(let y = 0; y<height; y++){
                            for(let x = 0; x<width; x++){
                                if(map[y][x] != 0)
                                    document.getElementById(`cell_${y}_${x}`).src = tiles_src[map[y][x]-1];
                            }
                        }
                    });
                }
                reader.readAsText(fileList[0]);
            }
        }

        function CLOSE_ADDFILE_MODAL(){
            let modal_bg = document.getElementById('modal_bg');
            let modal = document.getElementById('modal');
            while(modal.hasChildNodes()){modal.removeChild(modal.firstChild);};
            modal_bg.removeChild(modal);
            document.body.removeChild(modal_bg);
        }

        function ADMIT_TILE(result){
            let img = new Image();
            img.src = result;
            img.onload = () => {
                let temp_canvas = document.createElement('canvas');
                let temp_ctx = temp_canvas.getContext('2d');
                temp_canvas.width = img.width;
                temp_canvas.height = img.height;
                temp_ctx.drawImage(img, 0, 0, img.width, img.height);
                let url = temp_canvas.toDataURL();
                let imgd = temp_ctx.getImageData(0, 0, img.width, img.height).data;
                let rgbArray = new Array(img.width * img.height);
                for(let p = 0; p<img.width*img.height; p++){
                    rgbArray[p] = [imgd[4*p], imgd[4*p+1], imgd[4*p+2], imgd[4*p+3]];
                }
                document.getElementById(`wall_tile_${wall_tiles.length}`).src = url;
                wall_tiles_innerURL.push(url);
                wall_tiles.push({width:img.width, height:img.height, data:rgbArray});
                delete temp_canvas;
            }
            CLOSE_ADDFILE_MODAL();
        }
        
        function OPEN_ADDFILE_MODAL(){
            let modal_bg = document.createElement('div');
            let modal = document.createElement('div');
            modal_bg.id = 'modal_bg';
            modal_bg.style.justifyContent = 'center';
            modal_bg.style.alignItems = 'center';
            modal_bg.style.display='flex';
            modal_bg.style.position='absolute';
            modal_bg.style.left = '0px';
            modal_bg.style.top = '0px';
            modal_bg.style.width = '100%';
            modal_bg.style.height = '100%';
            modal_bg.style.background = 'rgba(0, 0, 0, 0.7)';

            modal.id = 'modal';
            modal.style.background = 'white';
            modal.style.color = 'black';
            modal.style.padding = '0rem 2rem 0rem 2rem';
            modal.style.height = 'fit-content';
            modal.style.width = 'fit-content';
            modal.innerHTML = 
            "<h3 style = 'text-align:center;'>TILE UPLOADER</h3>" + 
            "<p style = 'text-align:center'><img id = 'tile_preview' style='width:128px; height:128px; border: 0.07rem black solid;'></p>"+
            "<input type = 'file' id = 'tile_uploader' style = 'display:none;'>" +
            "<label for = 'tile_uploader'><p class = 'upload_btn'>파일 찾기</p></label>"+
            "<p style = 'text-align:center'><button id = 'btn_admit' style = 'margin-right:0.5rem;' disabled>추가</button><button onclick = 'CLOSE_ADDFILE_MODAL()'>닫기</button></p>";
            modal_bg.appendChild(modal); 
            document.body.appendChild(modal_bg);
            let file = document.getElementById('tile_uploader');
            file.onchange = () => {
                let fileList = file.files;
                let reader = new FileReader();
                reader.readAsDataURL(fileList[0]);
                reader.onload = () => {
                    document.getElementById('tile_preview').src = reader.result;
                    document.getElementById('btn_admit').disabled = false;
                    document.getElementById('btn_admit').addEventListener('click', ()=>{
                        ADMIT_TILE(reader.result);
                    });
                }
            }
        }

        function INIT_MAP(){
            for(let y = 0; y<height; y++){
                map[y] = [];
                for(let x = 0; x<width; x++){
                    map[y][x] = 0;
                }
            }
        }

        function LOAD_WALL_TILE(idx){
            return new Promise((resolve, reject)=>{
                let i = idx;
                let img = new Image();
                img.src = `/texture/wall/wall_${idx+1}.png`;
                img.onload = () =>{
                    let temp_canvas = document.createElement('canvas');
                    let temp_ctx = temp_canvas.getContext('2d');
                    temp_canvas.width = img.width;
                    temp_canvas.height = img.height;
                    temp_ctx.drawImage(img, 0, 0, img.width, img.height);

                    let imgd = temp_ctx.getImageData(0, 0, img.width, img.height).data;
                    let rgbArray = new Array(img.width * img.height);
                    for(let p = 0; p<img.width*img.height; p++){
                        rgbArray[p] = [imgd[4*p], imgd[4*p+1], imgd[4*p+2], imgd[4*p+3]];
                    }
                    wall_tiles[i] = {width:img.width, height:img.height, data:rgbArray};
                    wall_tiles_innerURL[i] = temp_canvas.toDataURL();
                    delete temp_canvas;
                    resolve();
                };
            })
        }

        function LOAD_FLOOR_TILE(idx=0){
            return new Promise((resolve, reject)=>{
                let i = idx;
                let img = new Image();
                img.src = `/texture/floor/floor_${idx+1}.png`;
                img.onload = () =>{
                    let temp_canvas = document.createElement('canvas');
                    let temp_ctx = temp_canvas.getContext('2d');
                    temp_canvas.width = img.width;
                    temp_canvas.height = img.height;
                    temp_ctx.drawImage(img, 0, 0, img.width, img.height);

                    let imgd = temp_ctx.getImageData(0, 0, img.width, img.height).data;
                    let rgbArray = new Array(img.width * img.height);
                    for(let p = 0; p<img.width*img.height; p++){
                        rgbArray[p] = [imgd[4*p], imgd[4*p+1], imgd[4*p+2], imgd[4*p+3]];
                    }
                    floor_tiles[i] = {width:img.width, height:img.height, data:rgbArray};
                    floor_tiles_innerURL[i] = temp_canvas.toDataURL();
                    delete temp_canvas;
                    resolve();
                };
            })
        }

        function LOAD_IMAGE(){
            LOAD_WALL_TILE(0).then(()=>{return LOAD_WALL_TILE(1)}).then(()=>{return LOAD_FLOOR_TILE(0)}).then(()=>{INIT_TILESET()});
        }

        function IMG_CELL(img_cell, x, y){
            if(nowclickedType == WALL){
                img_cell.src = wall_tiles_innerURL[nowclickedIdx];
                map[y][x] = nowclickedIdx+1;
            }
            else{
                img_cell.src = floor_tiles_innerURL[nowclickedIdx];
                map[y][x] = 0;
            }
        }

        function MAKE_GREED(height, width){
            for(let y = 0; y<height; y++){
                let row = document.createElement('div');
                row.style.display = 'flex';
                for(let x = 0; x<width; x++){
                    let px = x; let py = y;
                    let img_cell = document.createElement('img');
                    img_cell.id = `cell_${y}_${x}`;
                    img_cell.width = (64*0.5)|0; img_cell.height = (64*0.5)|0;
                    img_cell.border = "0.7rem white solid;"
                    img_cell.addEventListener('click', ()=>{
                        IMG_CELL(img_cell, px, py);
                    })
                    img_cell.addEventListener('dragover', ()=>{
                        IMG_CELL(img_cell, px, py);
                    })
                    row.appendChild(img_cell);
                }
                document.getElementById('map_editor').appendChild(row);
            }
        }

        function INIT_TILESET(){
            for(let y = 0; y<3; y++){
                let row = document.createElement('div');
                row.style.display = 'flex';
                for(let x = 0; x<3; x++){
                    let idx = y *3 + x;
                    let img_cell = document.createElement('img');
                    if(wall_tiles[idx] != undefined){ img_cell.src = wall_tiles_innerURL[idx]};
                    img_cell.id = `wall_tile_${idx}`;
                    img_cell.width = (64*0.7)|0; img_cell.height = (64*0.7)|0;
                    img_cell.border = "0.7rem white solid;"
                    img_cell.addEventListener('click', ()=>{
                        nowclickedIdx = idx;
                        nowclickedType = WALL;
                    });
                    row.appendChild(img_cell);
                }
                document.getElementById('wall_tile_set').appendChild(row);
            }

            for(let y = 0; y<3; y++){
                let row = document.createElement('div');
                row.style.display = 'flex';
                for(let x = 0; x<3; x++){
                    let idx = y*3 + x;
                    if(floor_tiles[idx] != undefined){
                        let img_cell = document.createElement('img');
                        img_cell.src = floor_tiles_innerURL[idx];
                        img_cell.id = `floor_tile_${idx}`;
                        img_cell.width = (64*0.7)|0; img_cell.height = (64*0.7)|0;
                        img_cell.border = "0.7rem white solid;"
                        img_cell.addEventListener('click', ()=>{
                            nowclickedIdx = idx;
                            nowclickedType = FLOOR;
                        });
                        row.appendChild(img_cell);
                    }
                }
                document.getElementById('floor_tile_set').appendChild(row);
            }
        }

        function INIT(){
            LOAD_IMAGE();
            INIT_MAP();
            MAKE_GREED(height, width);
        }

    </script>
    <body style = "background: #101010; color:white;" onload="INIT();">
        <div style = "display:flex">
            <div id = "map_editor" style = "margin-right: 0.7rem;text-align: center;">
                <h5 style = "text-align: center; margin: 0rem 0rem 0.5rem 0rem;">MAP SET</h5>
                <input id = "mapname" type = "text" placeholder="map name" style = "margin-bottom: 0.7rem;">
            </div>
            <div id = "tile_editor">
                <h5 style = "text-align: center; margin: 0rem 0rem 0.5rem 0rem;">WALL TILE SET</h5>
                <div id = "wall_tile_set"></div>
                <button id = "btn_add_tile" onclick="OPEN_ADDFILE_MODAL();">ADD TILE</button>

                <h5 style = "text-align: center; margin: 0rem 0rem 0.5rem 0rem;">FLOOR TILE SET</h5>
                <div id = "floor_tile_set"></div>
                <button id = "btn_add_tile" onclick="OPEN_ADDFILE_MODAL();">ADD TILE</button>
            </div>
        </div>
        <div style = "display: flex;">
            <label for = "btn_convert"><p style = "margin-right:0.5rem;padding:0.2rem; border:0.05rem white solid; width:fit-content;">.json으로 변환하기</p></label>
            <button id = "btn_convert" style = "display: none;" onclick = "CONVERT_RMP();"></button>
            <label for = "btn_load"><p style = "padding:0.2rem; border:0.05rem white solid; width:fit-content;">.json 파일 불러오기</p></label>
            <button id = "btn_load" style = "display: none;" onclick = "LOADING_RMP();"></button>
        </div>
    </body>
</html>